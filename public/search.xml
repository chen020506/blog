<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机网络学习笔记</title>
      <link href="/2022/01/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2022/01/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="课程内容总结"><a href="#课程内容总结" class="headerlink" title="课程内容总结"></a>课程内容总结</h2><ol><li>计算机网络和互联网</li><li>应用层</li><li>传输层</li><li>网络层：数据平面</li><li>网络层：控制平面</li><li>数据链路层和局域网</li><li>网络安全</li><li>无线和移动网络</li><li>多媒体网络</li><li>网络管理</li></ol><h1 id="第一章、计算机网络和互联网"><a href="#第一章、计算机网络和互联网" class="headerlink" title="第一章、计算机网络和互联网"></a>第一章、计算机网络和互联网</h1><h2 id="1、什么是Internet"><a href="#1、什么是Internet" class="headerlink" title="1、什么是Internet?"></a>1、什么是Internet?</h2><p>**1.1 从具体构成角度 **</p><p>​    <strong>零件的角度</strong></p><ul><li>节点<ul><li>主机及其上运行的应用程序</li><li>路由器、交换机等网络交换设备</li></ul></li><li>边：通信链路<ul><li>接入网链路：主机连接到互联网的链路</li><li>主干链路：路由器间的链路</li></ul></li><li>协议</li></ul><p><strong>1.2 从网络互联设备的角度</strong></p><ul><li><p>协议控制发送  、接收消息</p><ul><li>如TCP、IP、HTTP、FTP、PPP</li></ul></li><li><p>Internet:”网络的网络“</p><ul><li>松散的层次结构，互联的ISP</li><li>公共的Internet VS 专用的intranet</li></ul></li><li><p>Internet 标准</p><ul><li>RFC: Request for comments</li><li>IETF: Internet Engineering Task Force</li></ul></li><li><p><em>1.3 协议</em>*</p></li></ul><blockquote><p>定义了在两个或多个通信实体（对等层的实体）之间交换的报文格式和次序，以及在报文传输和/或接受或其他事件方面所采取的动作；</p></blockquote><p><strong>1.4 从服务的角度</strong></p><ul><li>使用通信设施进行通信的分布式应用<ul><li>Web、VoIP、email、分布式游戏、电子商务、社交平台……</li></ul></li><li>通信基础设施为apps提供编程接口（通信服务）<ul><li>将发送和接收数据的apps与互联网连接起来</li><li>为app应用提供服务类型、类似于邮政服务<ul><li>无连接不可靠服务</li><li>面向连接的可靠服务</li></ul></li></ul></li></ul><h2 id="2、网络边缘"><a href="#2、网络边缘" class="headerlink" title="2、网络边缘"></a>2、网络边缘</h2><p><strong>2.1 补充</strong></p><ul><li>网络结构<ul><li>主机</li><li>应用程序</li></ul></li><li>网络核心<ul><li>互连着的路由器</li><li>网络的网络</li></ul></li><li>接入网、物理媒体<ul><li>有线或者无线通信链路</li></ul></li></ul><p><strong>2.2 网络边缘</strong></p><ul><li>端系统(主机)<ul><li>运行应用程序</li><li>如Web、email</li><li>在“网络的边缘”</li></ul></li><li>客户/服务器模式<ul><li>客户端向服务器请求、接受服务</li><li>如Web浏览器 / 服务器：email客户端 / 服务器</li></ul></li><li>对等(peer-peer) 模式<ul><li>很少（甚至没有）专门的服务器</li><li>如 Gnutella、KaZaA,Emule</li><li>每个节点既是服务器也是客户端，互相请求、分布式系统，无客户 / 服务器模式的缺陷如迅雷等。</li></ul></li></ul><p><strong>2.3 网络边缘：采用网络设施的面向连接服务</strong></p><ol><li>目标：在端系统之间传输数据</li><li>握手：在数据传输之前做好准备<ul><li> 人类协议中：你好、你好</li><li> 两个通信主机为连接建立状态</li></ul></li><li>TCP-传输控制协议（Transmission Control Protocol）<pre><code>+ Internet上面面向连接的服务</code></pre></li></ol><blockquote><p>TCP服务</p><ul><li>可靠的、按顺序地传送数据<ul><li>确认和重传</li></ul></li><li>流量控制<ul><li>发送方不会淹没接收方</li></ul></li><li>拥塞控制<ul><li>当网络拥塞时，发送方降低发送速率</li></ul></li></ul></blockquote><p><strong>2.4 网络边缘：采用基础设施地无连接服务</strong></p><ol><li><p>目标：在端系统之间传输数据</p><pre><code>1. 无连接服务</code></pre></li><li><p>UDP-用户数据报协议（User Datagram Protocol)</p><ul><li>无连接</li></ul><ul><li>不可靠数据传输</li></ul><ul><li><p>无流量控制</p></li><li><p>无拥塞控制</p></li></ul></li><li><p>使用TCP的应用</p><ul><li>HTTP(Web)，FTP(文件传送)，Telnet(远程登陆)，SMTP(email)</li></ul></li><li><p>使用UDP的应用</p><ul><li>流媒体、远程会议、DNS、Internet电话</li></ul></li></ol><h2 id="3、网络核心"><a href="#3、网络核心" class="headerlink" title="3、网络核心"></a>3、网络核心</h2><p><strong>3.1 网络核心</strong></p><ol><li>网络核心</li><li>基本问题：数据怎样通过网络进行传输<ol><li>电路交换</li><li>分组交换<ul><li>将要传送的数据分成一个个单位：分组（pocket)</li><li>将分组从一个路由器传到相邻路由器（hop），一段段最终从源端传送到目标端</li><li> 每段：采用链路的最大传输能力（带宽）</li></ul></li></ol></li></ol><p><strong>3.2 网络核心：电路交换</strong></p><blockquote><p>端到端的资源被分配给从源端到目标端的呼叫叫”call”</p></blockquote><ol><li>独享资源：不同享<ul><li>每个呼叫一旦建立起来就能够保证性能</li></ul></li><li>如果呼叫没有数据发送，被分配的资源就会被浪费</li><li>通常被传统电话网络采用</li></ol><p><strong>3.3 网络核心：电路交换</strong></p><blockquote><p>为呼叫预留端-端资源</p></blockquote><ol><li>链路带宽、交换能力</li><li>专用资源：不共享</li><li>保证性能</li><li>要求建立呼叫连接</li><li>网络资源（如带宽）被分成片<ul><li>为呼叫分配片</li><li>如果某个呼叫没有数据，则其资源片处于空闲状态（不共享)</li><li>将带宽分成片<pre><code>* 频分* 时分* 波分</code></pre></li></ul></li></ol><p><strong>3.4 电路交换不适合计算机之间的通信</strong></p><ol><li><p>连接建立时间长</p></li><li><p>计算机之间的通信有突发性，如果使用线路交换，则浪费的片较多</p><ul><li>即使这个呼叫没有数据传输，其所占据的片也不能被别的呼叫使用</li></ul></li><li><p>可靠性不高？</p></li></ol><p><strong>3.5 网络核心：分组交换</strong></p><ol><li>以分组为单位存储-转发方式<pre><code>     + 网络带宽资源不再分为一个个片，传输时使用全部带宽     + 主机之间传输的数据被分成一个个分组</code></pre></li><li>资源共享、按需使用<ul><li>存储-转发：分组每次移动一跳（hop)<ul><li>在转发之前，节点必须收到整个分组</li><li>延迟比线路交换要大</li><li>排队时间</li></ul></li></ul></li></ol><p><strong>3.6 分组交换：存储-转发</strong></p><ol><li>被传输到下一个链路之前，整个分组必须到达路由器：存储-转发</li><li>在一个速率为R bps的链路，一个长度为L bits的分组的存储延时：L/R s</li></ol><p><strong>3.7 分组交换：排队延迟和丢失</strong></p><ul><li> 如果到达速率&gt;链路的输出速率</li><li>分组将会排队，等待传输</li><li>如果路由器的缓存用完了，分组将会被抛弃</li></ul><p><strong>3.7 网络核心的关键功能</strong></p><ol><li><p>路由：决定分组采用的源到目标的路径    </p><ul><li>路由算法</li></ul></li><li><p>转发：将分组从路由器的输入链路转移到输出链路</p></li></ol><p><strong>3.8 分组交换 VS 电路交换</strong></p><blockquote><p>同样的网络资源，分组交换允许更多用户使用网络！</p></blockquote><p>分组交换是“突发数据的胜利者？”</p><ol><li>适合于对突发式数据传输<ul><li>资源共享</li><li> 简单，不比建立呼叫</li></ul></li><li>过度使用会造成网络拥塞：分组延时和丢失<ul><li>对可靠的数据传输需要协议来约束：拥塞控制</li></ul></li></ol><p><strong>3.9 分组交换网络：存储-转发</strong></p><ol><li>分组交换：分组的存储转发一段一段从源端传到目标端，按照有无网络层的连接，分为：<ol><li>数据报网络：<ul><li>分组的目标地址决定下一跳</li><li>在不同的阶段，路由可以改变</li><li>类似：问路</li><li>Internet</li></ul></li><li>虚电路网络<ul><li>每个分组都带标签（虚电路标识VCID），标签决定下一跳</li><li>在呼叫建立时决定路径，在整个呼叫中路径保持不变</li><li>路由器维持每个呼叫的状态信息</li><li>X.25和ATM</li></ul></li></ol></li></ol><p><strong>3.10 数据报（datagram）的工作原理</strong></p><ul><li>在通信之前，无需建立起一个连接，有数据就传输</li><li>每一个分组都独立路由（路径不一样，可能会失序）</li><li>路由器根据分组的目标地址进行路由</li></ul><p><strong>3.11 总结</strong></p><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/672b581f283fedc731e1b9f8295e3d0a3215d150/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.3.png" alt="总结"></p><blockquote><p>数据报是按地址找人，不事先确定路好不好走；</p><p>虚电路是先去一次，熟悉一下路线，再进行发送</p></blockquote><h2 id="4、接入网和物理媒体"><a href="#4、接入网和物理媒体" class="headerlink" title="4、接入网和物理媒体"></a>4、接入网和物理媒体</h2><p><strong>4.1 Q:怎样将端系统和边缘路由器连接？</strong></p><ol><li>住宅接入网络</li><li>单位接入网络（学校、公司）</li><li>无线接入网络</li><li>注意：<ul><li>接入网络的带宽（bits per second）</li><li>共享/专用</li></ul></li></ol><p><strong>4.2 住宅接入：modern</strong></p><ol><li>将上网数据==调制==加载音频信号上，在电话线上传输，在局端将其中的数据==解调==出来；反之亦然<ul><li>调频</li><li>调幅</li><li>调相位</li><li>综合调制</li></ul></li><li>==拨号调制解调器==<ul><li>56Kbps的速率直接接入路由器（通常更低）</li><li>不能同时上网和打电话；不能总是在线</li></ul></li></ol><p><strong>4.3 接入网：digital subscriber line(DSL)</strong></p><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/ceda966329fe0ef748714c8ffef6d84776283e72/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.4.png"></p><pre><code>      1. 采用==现存的==到交换局DSLAM的电话线         + DSL线路上的数据被传到互联网         + DSL线路上的语音被传到电话网      2. &lt;2.5 Mbps上行传输速率（typically&lt;1 Mbps）      3. &lt;24 Mbps下行传输速率（typically&lt;10 Mbps）</code></pre><p><strong>4.4 接入网:线缆网络</strong></p><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/58e5fd6577d46442714cdf205045ad2e25c62ca3/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.4.2.png"></p><p>有线电视信号线缆双向改造</p><blockquote><p>FDM:在不同频段传输不同信道的数据，数字电视和上网数据（上下行）</p></blockquote><ol><li>HFC:hybird fiber coax<ul><li>非对称：最高30Mbps的下行传输速率，2 Mbps上行传输速率</li></ul></li><li>==线缆和光纤网络==将每个家庭用户接入到 ISP 路由器</li><li>各用户==共享==到线缆头端的接入网络<ul><li>与DSL不同，DSL每个用户一个专用线路到CO（central office)</li></ul></li></ol><p><strong>4.5 住宅接入：电缆模式</strong></p><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/3291a9daead09c3cd0a446a75018b81abbb574d1/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.4.3.png"></p><p><strong>4.6 接入网：家庭网络</strong></p><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/3291a9daead09c3cd0a446a75018b81abbb574d1/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.4.4.png"></p><p><strong>4.7 企业接入网路</strong></p><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/921b0005314c1e2da3b4367a46b976e8a862170c/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.4.5.png"></p><ol><li>经常被企业或者大学等机构采用<ul><li>10 Mbps,100 Mbps,1Gbps,10Gbps传输率</li><li>现在，端系统经常直接接到以太网交换机上</li></ul></li></ol><p><strong>4.8 无线接入网络</strong></p><ol><li>各无线端系统共享无线接入网络（端系统到无线路由器）<ul><li>通过基站或者接入点</li></ul></li></ol><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/921b0005314c1e2da3b4367a46b976e8a862170c/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.4.6.png"></p><p><strong>4.9 物理媒体</strong></p><ol><li>Bit:在发送-接收时间传播</li><li>物理链路：连接每个发送-接收对之间的物理媒体</li><li>导引型媒体：<ul><li>信号沿着固体媒介被导引：同轴电缆、光纤、双绞线</li></ul></li><li>非导引型媒体<ul><li>开放的空间传输电磁波或者光信号，在电磁或者光信号中承载数字数据</li></ul></li><li>双绞线（TP）<ul><li>两根绝缘铜导线拧合</li></ul></li></ol><p><strong>4.10 物理媒体：同轴电缆、光纤</strong></p><ol><li>同轴电缆：<ul><li>两根同轴的铜导线</li><li>双向</li><li>基带电缆</li><li>宽带电缆</li></ul></li><li>光纤和光缆<ul><li>光脉冲，每个脉冲表示一个bit，在玻璃纤维中传输</li><li>高速：点到点的高速传输（如10Gbps-100Gbps传输速率）</li><li>低误码率：在两个中继器之间可以有很长的距离，不受电磁噪声的干扰</li><li>安全</li></ul></li></ol><p><strong>4.11 物理媒介：无线链路</strong></p><ol><li>开放空间传输电磁波，携带要传输的数据</li><li>无需物理：”线缆“</li><li>双向</li><li>传播环境效应’<ul><li>反射</li><li>吸收</li><li>干扰</li></ul></li><li>无线链路类型‘<ul><li>地面微波</li><li>LAN</li><li>wide-area</li><li>卫星</li></ul></li></ol><h2 id="5、Internet结构和ISP"><a href="#5、Internet结构和ISP" class="headerlink" title="5、Internet结构和ISP"></a>5、Internet结构和ISP</h2><p><strong>5.1 互联网络结构：网络的网络</strong></p><ol><li><p>端系统通过==接入ISPs==(Internet Service Providers)连接到互联网</p><ul><li>住宅，公司和大学的ISPs</li></ul></li><li><p>接入ISPs相应的必须是互联的</p><ul><li>因此任何2个端系统可互相发送分组到对方</li></ul></li><li><p>导致的“网络的网路”非常复杂</p><ul><li>发展和演化是通过==经济的==和==国家的==政策来驱动</li></ul></li><li><p>竞争：如果全局ISP是有利可为的业务，那会有竞争者</p></li><li><p>合作：通过ISP之间的合作可以完成业务的扩展，肯定会有互联，对等互联的结算关系</p><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/855b55d8d9a0752771cec12cca9ce423df5818ba/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.5.1.png"></p></li></ol><ol start="6"><li>然后业务会细分（全球接入和区域接入），区域网络将出现，用于将接入ISPs连接到全局ISPs</li></ol><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/5ceccb9bb2f3e2e778f6f4bbb33f12b22053775a/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.5.2.png"></p><ol start="7"><li>然后==内容提供商网络（Internet Content Providers==,e.g.,Google,Microsoft,Akamai)可能会构建它们自己的网络，将它们的服务、内容更加靠近端用户，向用户提供更好的服务，减少自己的运营支出。</li></ol><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/5ceccb9bb2f3e2e778f6f4bbb33f12b22053775a/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.5.3.png"></p><ol start="8"><li><p>在网络的最中心，一些为数不多的充分连接的大范围网络（分布广、节点有限、但是之间有着多重连接）</p><ul><li><p>“tier-1” commercial ISPs,国家或者国际范围的覆盖</p></li><li><p>==content provider network==:将它们的数据中心接入ISP，方便周边用户的访问；通常私有网络之间用专网绕过第一层ISP和区域</p><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/5ceccb9bb2f3e2e778f6f4bbb33f12b22053775a/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.5.4.png"></p></li></ul></li></ol><p><strong>5.2 Internet结构：network of networks</strong></p><ol><li>松散的层次模型</li><li>==中心：第一层ISP==（如UUNet,BBN/Genuity,Sprint,AT&amp;T)国家/国际覆盖，速率极高<ul><li>直接与其他第一层ISP相连</li><li>与大量的第二层ISP和其他客户网络相连</li></ul></li></ol><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/12434a7f5b087f3c71dee8a0f05716c53190689c/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.5.5.png"></p><ol start="3"><li><p>第二层ISP:更小些的（通常是区域性的）ISP</p><ul><li><p>与一个或多个第一层ISPs，也可能与其他第二层ISP</p><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/12434a7f5b087f3c71dee8a0f05716c53190689c/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.5.6.png"></p></li></ul></li><li><p>第三层ISP与其他本地ISP</p><ul><li><p>接入网（与端系统最近）</p><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/12434a7f5b087f3c71dee8a0f05716c53190689c/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.5.7.png"></p></li></ul></li></ol><p><strong>5.3 互联网结构：网络的网络</strong></p><ol><li>很多内容提供商（如：Google）可能会部署自己的网络，连接自己的在各地的DC(数据中心)，走自己的数据</li><li>连接若干local ISP和各级（包括一层）ISP，更加靠近用户</li></ol><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/12434a7f5b087f3c71dee8a0f05716c53190689c/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.5.8.png"></p><p><strong>5.4 ISP之间的连接</strong></p><ol><li>POP：高层ISP面向客户网络的接入点，涉及费用结算<ul><li>如一个低层ISP接入多个高层ISP，多宿（multi home)</li></ul></li><li>对等接入：2个ISP对等互联，不涉及费用结算</li><li>IXP;多个对等ISP互联互通之处，通常不涉及费用结算<ul><li>对等接入</li></ul></li><li>ICP自己部署专用网络，同时和各级ISP连接</li></ol><h2 id="6、分组延时、丢失和吞吐量"><a href="#6、分组延时、丢失和吞吐量" class="headerlink" title="6、分组延时、丢失和吞吐量"></a>6、分组延时、丢失和吞吐量</h2><p><strong>6.1 分组丢失和延时是怎样发生的？</strong></p><ol><li>在路由器缓冲区的分组队列<ul><li>==分组到达链路的速率超过了链路输出的能力==</li><li>分组等待排到队头、被传输</li></ul></li></ol><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/d548c29d4b984baaeac19b216b310d4d9b9587ce/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.6.1.png"></p><p><strong>6.2 四种分组延时</strong></p><ol><li><p>==节点处理延时：==</p><ul><li>检查bit级差错</li><li>检查分组首部和决定将分组导向何处</li></ul></li><li><p>==排队延时==</p><ul><li>在输出链路上等待传输的时间</li><li>依赖于路由器的拥塞程度</li></ul><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/d548c29d4b984baaeac19b216b310d4d9b9587ce/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.6.2.png"></p></li><li><p>==传输延时==</p><ul><li>R=链路带宽（bps)</li><li>L=分组长度（bits）</li><li>将分组发送到链路上的时间=L/R</li><li>存储转发延时</li></ul></li><li><p>==传播延时==</p><ul><li><p>d=物理链路的长度</p></li><li><p>s=在媒体上的传播速度</p></li><li><p>传播延时=d/s</p><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/d548c29d4b984baaeac19b216b310d4d9b9587ce/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.6.3.png"></p></li></ul><ol start="5"><li><p>节点延时</p><p><strong>d<del>nodal</del>=d<del>proc</del>+d<del>queue</del>+d<del>trans</del>+d<del>prop</del></strong></p><ul><li>d<del>proc</del>=处理延时<ul><li>通常是微秒数量级或更少</li></ul></li><li>d<del>queue</del>=排队延时<ul><li>取决于拥塞程度</li></ul></li><li>d<del>trans</del>=传输延时<ul><li>=L/R，对低速率的链路而言很大（如拨号），通常为微秒级到毫秒级</li></ul></li><li>d<del>prop</del>=传播延时<ul><li>几微秒到几百毫秒</li></ul></li></ul></li></ol></li></ol><p><strong>6.3 分组丢失</strong></p><ol><li>链路的队列缓冲区容量有限</li><li>当分组到达一个满的队列时，该分组将会丢失</li><li>丢失的分组可能会被前一个节点或者源端系统重传，或者根本不重传</li></ol><p><strong>6.4 吞吐量</strong></p><ol><li>吞吐量：在源端和目标端之间传输的速率（数据量/单位时间）<ul><li>==瞬间吞吐量==：在一个时间点的速率</li><li>==平均吞吐量==：在一个长时间内的平均值</li></ul></li></ol><h2 id="7、协议层次及服务模型"><a href="#7、协议层次及服务模型" class="headerlink" title="7、协议层次及服务模型"></a>7、协议层次及服务模型</h2><p><strong>7.1 协议层次</strong><br>==网络是一个复杂的系统！==</p><ol><li>网络功能繁杂：数字信号的物理信号承载、点到点、路由、rdt、进程区分、应用等</li><li>现实来看，网络的许多构成元素和设施：<ul><li>主机</li><li>路由器</li><li>各种媒体的链路</li><li>应用</li><li>协议</li><li>硬件、软件</li></ul></li></ol><p><strong>7.2 例子：两位异地哲学家的交流</strong></p><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/17a99b49e95f42d7343832213bfd8b2f70c89593/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.7.1.png"></p><p><strong>7.3 航线的功能层次</strong></p><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/17a99b49e95f42d7343832213bfd8b2f70c89593/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.7.2.png"></p><ol><li>==层次化方式实现复杂网络功能==：<ul><li>将网络复杂的功能分层功能明确的==层次==，每一层实现了其中一个或一组功能，功能中有其上层可以使用的功能：==服务==</li><li>本层协议实体相互交互执行本层的==协议动作==，目的是实现本层功能，通过接口为上层提供更好的服务</li><li>在实现本层协议的时候，直接==利用了下层所提供的服务==</li><li>本层的服务：借助下层服务实现的本层协议实体之间交互带来的新功能（上层可以利用的）+更下层所提供的服务</li></ul></li></ol><p><strong>7.4 服务和服务站点</strong></p><ol><li><p>服务（Service）：低层实体向上层实体提供它们之间的通信的能力</p><ul><li>通信用户（service user)</li><li>服务提供者（service provider)</li></ul></li><li><p>原语（primitive）：上层使用下层服务的形式，高层使用底层提供的服务，以及低层向高层提供服务都是通过服务访问原语来进行交互的–形式</p></li><li><p>服务访问点SAP（Service Access Point）:上层使用下层提供的服务通过层间的接口—地点；</p><ul><li>例子：邮箱</li><li>地址（address):下层的一个实体支撑着上层的多个实体，SAP有标志不同上层实体的作用</li><li>可以有不同的实现，队列</li><li>例子：传输层的SAP：端口（port)</li></ul></li></ol><p><strong>7.5 服务的类型</strong></p><ol><li>面向连接的服务（Connection-oriented Service)<ul><li>==连接==：两个通信实体为进行通信而建立的一种结合</li><li>面向连接的服务通信的过程：建立连接，通信，拆除连接</li><li>面向连接的服务的例子：网络层的连接被成为虚电路</li><li>适用范围：对于大的数据块要传输；不适合小的零星报文</li><li>特点：保序</li><li>服务类型：<ul><li>可靠的信息流 传送页面（可靠的获得，通过接收方的确认）</li><li>可靠的字节流 远程登陆</li><li>不可靠的连接 数字化的声音</li></ul></li></ul></li><li>面向无连接的服务（Connectionless Service)<ul><li>无连接的服务：两个对等层实体在通信前不需要建立一个连接，不预留资源；不需要通信双方都是活跃；（例：寄信）</li><li>特点：不可靠、可能重复、可能失序</li><li>IP分组，数据包</li><li>适用范围：适合传输零星数据</li><li>服务类型：<ul><li>不可靠的数据报 电子方式的函件</li><li>有确认的数据报 挂号信</li><li>请求回答 信息查询</li></ul></li></ul></li></ol><p><strong>7.6 服务和协议</strong></p><ol><li><p>服务与协议的区别</p><ul><li>服务：低层实体向上层实体提供它们之间的通信的能力，通过原语来操作的，垂直</li><li>协议：对等层实体之间在相互通信的过程中，需要遵循的规则的集合，水平</li></ul></li><li><p>服务与协议的联系</p><ul><li>本层==协议的实现==要靠下层提供的服务来实现</li><li>本层实体通过协议为上层==提供更高级的服务==</li></ul></li></ol><p><strong>7.7 分层处理和实现复杂系统系统的好处？</strong><br>==对付复杂的系统==</p><ol><li><p>概念化：结构清晰，便于标示网络组件，以及描述其相互关系</p><ul><li>分层参考模型</li></ul></li><li><p>结构化：模块化更易于维护和系统升级</p><ul><li>改变某一层的服务的实现不影响系统中的其他层次<ul><li>对于其他层次而言是透明的</li></ul></li></ul></li></ol><p><strong>7.8 Internet协议栈</strong></p><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/c1846e43a777cd4b309c24581e83b8e1eeb78dc9/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.7.3.png"></p><ol><li>==网络层==：网络应用<ul><li>为人类用户或者其他应用进程提供网络应用服务</li><li>FTP、SMAP、HTTP、DNS</li></ul></li><li>==传输层==：主机之间的数据传输<ul><li>在网络层提供的端到端通信基础上，细分为进程到进程，将不可靠的通信变成可靠的通信</li></ul></li><li>==网络层==：为数据报从源到目的选择路由<ul><li>主机主机之间的通信，端到端通信，不可靠</li><li>IP,路由协议</li></ul></li><li>==链路层==：相邻网络节点间的数据传输<ul><li>2个相邻2点的通信，点到点通信，可靠或不可靠</li><li>点对点协议PPP，802.11(wifi)，Ethernet</li></ul></li><li>==物理层==：在线路上传送bit</li></ol><p><strong>7.9 ISO/OSI 参考模型</strong></p><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/c1846e43a777cd4b309c24581e83b8e1eeb78dc9/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.7.4.png"></p><ol><li>==表示层==：允许应用解释传输的数据，例如加密，压缩，机器相关的表示转换</li><li>==会话层==：数据交换的同步，检查点，恢复</li><li>互联网协议栈没有这两层</li></ol><p><strong>7.10 封装和解封装</strong></p><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/c1846e43a777cd4b309c24581e83b8e1eeb78dc9/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.7.5.png"></p><p><strong>7.11 各层次的协议数据单元</strong></p><ol><li>应用层：报文（message)</li><li>传输层：报文段（segment):TCP段，UDP数据报</li><li>网络层：分组packet(如果无连接方式：数据报datagram)</li><li>数据链路层：帧（frame)</li><li>物理层：位（bit)</li></ol><h2 id="8、历史"><a href="#8、历史" class="headerlink" title="8、历史"></a>8、历史</h2><ol><li>早期（1960以前）计算机网络</li></ol><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/731c5b9925ff1acefe4b620983a573de06f531a3/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.8.1.png"></p><ol start="2"><li>1961-1972:早期的分组交换概念</li></ol><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/731c5b9925ff1acefe4b620983a573de06f531a3/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.8.2.png"></p><ol start="3"><li>1972-1980:专用网络和网络互连</li></ol><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/731c5b9925ff1acefe4b620983a573de06f531a3/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.8.3.png"></p><ol start="4"><li>1980-1990：体系结构变化，网络数量激增，应用丰富</li></ol><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/731c5b9925ff1acefe4b620983a573de06f531a3/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.8.4.png"></p><ol start="5"><li>1990,2000:商业化，Web，新的应用</li></ol><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/731c5b9925ff1acefe4b620983a573de06f531a3/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.8.5.png"></p><ol start="6"><li>2005-现在</li></ol><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/731c5b9925ff1acefe4b620983a573de06f531a3/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/1.8.6.png"></p><h2 id="9、小结"><a href="#9、小结" class="headerlink" title="9、小结"></a>9、小结</h2><p><strong>小结</strong></p><ol><li>Internet</li><li>什么是协议</li><li>网络边缘，核心，接入网络<ul><li>分组交换 VS 电路交换</li></ul></li><li>Internet / ISP 结构</li><li>性能：丢失，延时，吞吐量</li><li>层次模型和服务模型</li><li>历史</li></ol><p><strong>小结1</strong></p><ol><li>组成角度看什么是互联网<ul><li>边缘：端系统（包括应用）+接入网</li><li>核心：网络交换设备+通信链路</li><li>协议：对等层实体通信过程中遵守的规则的集合<ul><li>语法、语义、时序</li></ul></li></ul></li><li>为了实现复杂的网络功能，采用分层方式设计、实现的调试<ul><li>应用层、传输层、网络层、数据链路层、物理层</li><li>协议数据单位<ul><li>报文、报文段、分组、帧、位</li></ul></li></ul></li><li>从服务角度看互联网<ul><li>通信服务基础设施<ul><li>提供的通信服务：面向连接、无连接</li></ul></li><li>应用</li></ul></li><li>应用之间的交互<ul><li>C / S模式</li><li>P2P模式</li></ul></li></ol><p><strong>小结2</strong></p><ol><li><p>数据交换</p><ul><li>分组数据交换</li><li>线路交换</li></ul></li><li><p>比较线路交换和分组交换</p></li><li><p>分组交换的2种方式</p><ul><li>虚电路</li><li>数据报</li></ul></li><li><p>接入网和物理媒介</p><ul><li>接入网技术：<ul><li>住宅：ADSL，拨号</li><li>单位：以太网</li><li>无线接入方式</li></ul></li><li>物理媒介<ul><li>光纤，同轴电缆，以太网，双绞线</li></ul></li></ul></li><li><p>ISP层次结构</p></li></ol><p><strong>小结3</strong></p><ol><li>分组交换网络中延迟和丢失是如何发生的<ul><li>延迟的组成：处理、传输、传播、排队</li></ul></li><li>网络的分层体系结构<ul><li>分层体系结构</li><li>服务</li><li>协议数据单元</li><li>封装与解封装</li></ul></li><li>历史</li></ol><h1 id="第二章-应用层"><a href="#第二章-应用层" class="headerlink" title="第二章 应用层"></a>第二章 应用层</h1><h2 id="0、总结"><a href="#0、总结" class="headerlink" title="0、总结"></a>0、总结</h2><p><strong>提纲</strong></p><ol><li>2.1 应用层协议原理</li><li>2.2 Web and HTTP</li><li>2.3 FTP*</li><li>2.4 Email<ul><li>SMTP</li><li>POP3</li><li>IMAP</li></ul></li><li>2.5 DNS</li><li>2.6 P2P应用</li><li>2.7 CDN</li><li>2.8 TCP套接字（Socket）编程</li><li>2.9 UDP套接字编程</li></ol><p><strong>目标</strong></p><ol><li>网络应用的原理：网络应用协议的概念和实现方面<ul><li>传输层的服务模型</li><li>客户-服务器模式</li><li>对等模式（peer-to-peer）</li><li>内容分发网络</li></ul></li><li>网络应用的实例：互联网流行的应用层协议<ul><li>HTTP</li><li>FTP</li><li>SMTP / POP3 / IMAP</li><li>DNS</li></ul></li><li>编程：网络应用程序<ul><li>Socket API</li></ul></li></ol><h2 id="1、应用层协议原理"><a href="#1、应用层协议原理" class="headerlink" title="1、应用层协议原理"></a>1、应用层协议原理</h2><p><strong>1.0 创建一个新的网络应用</strong></p><ol><li>编程<ul><li>在不同的端系统上运行</li><li>通过网络基础设施提供的服务，应用进程彼此通信</li><li>如Web:<ul><li>Web服务器软件与浏览器软件通信</li></ul></li></ul></li><li>网络核心中没有应用层软件<ul><li>网络核心没有应用层功能</li><li>网络应用只在端系统上存在，快速网络应用开发和部署</li></ul></li></ol><p><strong>1.1 网络应用的体系结构</strong></p><p>可能的应用架构：</p><ol><li>客户-服务器模式（C/S模式）</li><li>对等模式（P2P模式）</li><li>混合体：客户-服务器和对等体系结构</li></ol><p><strong>1.2 客户-服务器（C/S）体系结构</strong></p><ol><li>==服务器：==<ul><li>一直运行</li><li>固定的IP地址和周知的端口号（约定）</li><li>扩展性：服务器场<ul><li>数据中心进行扩展</li><li>扩展性差</li></ul></li></ul></li><li>==客户端：==<ul><li>主动与服务器通信</li><li>与互联网有间歇性的连接</li><li>可能是动态IP地址</li><li>不直接与其他客户端通信</li></ul></li></ol><p><strong>1.3 对等体（P2P）体系结构</strong></p><ol><li>（几乎）没有一直运行的服务器</li><li>任意端系统之间可以进行通信</li><li>每一个节点既是客户端又是服务器<ul><li>自扩展性-新peer节点带来新的服务能力，当然也带来新的服务请求</li></ul></li><li>参与的主机间歇性连接且可以改变IP地址<ul><li>难以管理</li></ul></li><li>例子：迅雷</li></ol><p><strong>1.4 C / S 和P2P体系结构的混合体</strong></p><p>==Napster==</p><ol><li><p>文件搜索：集中</p><ul><li>主机在中心服务器上注册其资源</li><li>主机向中心服务器查询资源位置</li></ul></li><li><p>文件传输：P2P</p></li></ol><p>==即时通信==</p><ol><li>在线检测：集中<ul><li>当用户上线时，向中心服务器注册其IP地址</li><li>用户与中心服务器联系，以找到其在线好友的位置</li><li>两个用户之间聊天：P2P</li></ul></li></ol><p><strong>1.5 进程通信</strong></p><blockquote><p>客户端进程：发起通信的进程</p><p>服务器进程：等待连接的进程</p></blockquote><ol><li>==进程：==在主机上运行的应用程序</li><li>在同一个主机内，使用==进程间通信机制==通信（操作系统定义）</li><li>不同主机，通过交换==报文（Message)==来通信<ul><li>使用OS提供的通信服务</li><li>按照应用协议交换报文<ul><li>借助传输层提供的服务</li></ul></li></ul></li></ol><blockquote><p>注意：P2P架构的应用也有客户端进程和服务器进程之分</p></blockquote><p><strong>1.6 分布式进程通信需要解决的问题</strong></p><ol><li>问题1：进程标示和寻址问题（==服务用户==）</li><li>问题2：传输层-应用层提供服务是如何（==服务==）<ul><li>位置：层间界面的SAP（TCP/IP:socket）</li><li>形式：应用程序接口API(TCP/IP：socket API)</li></ul></li><li>问题3：如何使用传输层提供的服务，实现应用程序之间的报文交换，实现应用（==用户使用服务==）<ul><li>定义应用层协议：报文格式，解释，时序等</li><li>编制程序，使用OS提供的API，调用网络基础设施提供通信服务传报文，实现应用时序等；</li></ul></li></ol><p><strong>1.7 问题1：==对地址进行编址==</strong></p><ol><li>进程为了接收报文，必须有一个标示，即:SAP（发送也需要标示）<ul><li>主机：唯一的32位IP地址<ul><li>仅仅有IP地址不能够唯一标识一个进程；在一台端系统上有很多应用进程在运行</li></ul></li><li>所采用的传输层协议：TCP or UDP</li><li>==端口号（Port Numbers)==</li></ul></li><li>一些知名端口号的例子：<ul><li>HTTP:TCP 80</li><li>Mail:TCP 25</li><li>ftp:TCP 2</li></ul></li><li>一个进程，用IP+port标示端节点</li><li>本质上，一对主机进程之间的通信由2个端节点构成</li></ol><p><strong>1.8 问题2：</strong></p><p><strong>1.8.1 问题2：传输层提供的服务-需要穿过层间的信息</strong></p><ol><li>层间接口必须要携带的信息<ul><li>要传输的报文（对于本层来说：SDU）</li><li>谁传的：己方的应用进程的标示：IP+TCP(UDP)端口</li><li>传给谁：对方的应用进程的标示：对方的IP+TCP(UDP)端口</li></ul></li><li>传输层实体（tcp或者udp实体）根据这些信息进行TCP报文段（UDP数据报）的封装<ul><li>源端口号，目标端口号，数据等</li><li>将IP地址往下交IP实体，用于封装IP数据报：源IP，目标IP</li></ul></li></ol><p><strong>1.8.2 问题2：传输层提供的服务-层间信息的代表</strong></p><ol><li>如果Socket API每次传输报文，都携带如此多的信息，太繁琐易错，不便于管理</li><li>用个代号标示通信的双方或者单方：socket</li><li>就像OS打开文件返回的句柄一样<ul><li>对句柄的操作，就是对文件的操作</li></ul></li><li>TCP socket:<ul><li>TCP服务，两个进程之间的通信需要之前要建立连接<ul><li>两个进程通信会持续一段时间，通信关系稳定</li></ul></li><li>可以用一个整数表示两个应用实体之间的通信关系，==本地==标示</li><li>穿过层间接口的信息量==最小==</li><li>TCP socket:源IP，源端口，目标IP，目标端口</li></ul></li></ol><p><strong>1.8.3 TCP之上的套接字（socket)</strong></p><ol><li><p>对于使用面向连接服务（TCP)的应用而言，套接字是4元组的一个具有==本地意义的标示==</p><ul><li>4元组：==（源IP，源port，目标IP，目标port)==</li><li>唯一的指定了一个会话（2个进程之间的会话关系）</li><li>应用使用的这个标示，与远程的应用进程通信</li><li>不必在每一个报文的发送都要指定这4元组</li><li>就像使用操作系统打开一个文件，OS返回一个文件句柄一样，以后使用这个文件句柄，而不是使用这个文件的目录名、文件名</li><li>简单，便于管理</li></ul></li><li><p>TCP socket</p><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/48f9dc03cfab25e5619e3d640233d894089efec8/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/2.1.1.png"></p></li><li><p>TCP socket</p><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/48f9dc03cfab25e5619e3d640233d894089efec8/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/2.1.2.png"></p></li></ol><p><strong>1.8.4 问题2：传输层提供的服务-层间信息代码</strong></p><ol><li>UDP socket:<ul><li>UDP服务，两个进程之间的通信需要之前无需建立连接<ul><li>每个报文都是独立传输的</li><li>前后报文可能给不同的分布式进程</li></ul></li><li>因此，只能用一个整数表示本应用实体的标示<ul><li>因为这个报文可能传给另外一个分布式进程</li></ul></li><li>穿过层间接口的信息大小最小</li><li>UDP socket:本IP,本端口</li><li>但是传输报文时：必须要提供对方的IP，port<ul><li>接收报文时：传输层需要上传对方的IP，port</li></ul></li></ul></li></ol><p><strong>1.8.5 UDP之上的套接字（socket)</strong></p><ol><li>对于使用无连接服务（UDP）的应用而言，套接字是2元组的一个具有==本地意义的标示==<ul><li>2元组：IP，port(源端指定)</li><li>UDP套接字指定了应用所在的一个==端节点（end point)==</li><li>在发送数据报时，采用创建好的本地套接字（标示ID），就不必在发送每个报文中指明自己所采用的ip和port</li><li>但是在发送报文时，必须要指定对方的ip和udp port</li></ul></li></ol><p><strong>1.8.6 UDP socket</strong></p><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/48f9dc03cfab25e5619e3d640233d894089efec8/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/2.1.3.png"></p><p><strong>1.8.7 套接字（Socket)</strong></p><ol><li>进程向==套接字==发送报文或从套接字接收报文</li><li>套接字&lt;-&gt;门户<ul><li>发送进程将报文退出门户，发送进程依赖于传输层设施在另外一侧的门将报文交付给接收进程</li><li>接收进程从另外一端的门户收到报文（依赖于传输层设施）</li></ul></li></ol><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/37e81adbeedbf53c685aa061fc58426d32f8cace/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/2.1.4.png"><strong>1.9 问题3：如何使用传输层提供的服务实现应用</strong></p><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/37e81adbeedbf53c685aa061fc58426d32f8cace/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/2.1.5.png"></p><ol><li>定义应用层协议：报文格式，解释，时序等</li><li>编制程序，通过API调用网络基础设施提供通信服务传报文，解析报文，实现应用时序等</li></ol><p><strong>1.10 应用层协议</strong></p><ol><li>定义了：运行在不同端系统上的应用进程如何相互交换报文<ul><li>交换的==报文类型==：请求和应答报文</li><li>各种报文类型的==语法==：报文中的各个字段及其描述</li><li>字段的==语义==：即字段取值的含义</li><li>进程何时、如何发送报文及对报文进行响应的==规则==</li></ul></li><li>应用协议仅仅是应用的一个组成部分<ul><li>Web应用：HTTP协议，web客户端，web服务器，HTML</li></ul></li><li>==公开协议：==<ul><li>由RFC文档定义</li><li>允许互操作</li><li>如HTTP,SMTP</li></ul></li><li>==专用（私有）协议：==<ul><li>协议不公开</li><li>如：skype</li></ul></li></ol><p><strong>1.11 应用层需要传输层提供什么样的服务？如何描述传输层的服务？</strong></p><ol><li><p>==数据丢失率==</p><ul><li>有些应用则要求100%的可靠数据传输（如文件）</li><li>有些应用（如音频）能容忍一定比例以下的数据丢失</li></ul></li><li><p>==延迟==</p><ul><li>一些应用出于有效性考虑，对数据传输有严格的时间限制<ul><li>Internet电话，交互式游戏</li><li>延迟、延迟差</li></ul></li></ul></li><li><p>==吞吐==</p><ul><li>一些应用（如多媒体）必须需要最小限度的吞吐，从而使得应用能够有效运转</li><li>一些应用能充分利用可供使用的吞吐（弹性应用）</li></ul></li><li><p>==安全性==</p><ul><li>机密性</li><li>完整性</li><li>可认证性（鉴别）</li></ul></li><li><p>常见应用对传输服务的要求</p><p><img src="https://gitee.com/xatu-han-chen/computer-network-learning/raw/37e81adbeedbf53c685aa061fc58426d32f8cace/%E4%B8%AD%E7%A7%91%E5%A4%A7%20%E9%83%91%E7%83%87/resource/2.1.6.png"></p><p><strong>1.12 Internet 传输层提供的服务</strong></p><ol><li>==TCP服务：==<ul><li>可靠的传输服务</li><li>流量控制：发送方不会淹没接收方</li><li>拥塞控制：当网络出现拥塞时，能抑制发送方</li><li>不能提供的服务：时间保证、最小吞吐保证和安全</li><li>面向连接：要求在客户端进程和服务器进程之间建立连接</li></ul></li><li>==UDP服务：==<ul><li>不可靠数据传输</li><li>不提供的服务：可靠，流量控制、拥塞控制、时间、带宽保证、建立连接</li></ul></li><li>==UDP存在的必要性<ul><li>能够==区分不同的进程==，而IP服务不能<ul><li>在IP提供的主机到主机端到端功能的基础上，区分了主机的应用进程</li></ul></li><li>==无需建立连接==，省去了建立连接时间，适合事务性的应用</li><li>==不做可靠性的工作==，例如检错重发，适合那些对实时 性要求比较高而对正确性要求不高的应用<ul><li>因为为了实现可靠性（准确性、保序等），必须付出时间代 价（检错重发）</li></ul></li><li>没有拥塞控制和流量控制，==应用能够按照设定的速度发送数据==<ul><li>而在TCP上面的应用，应用发送数据的速度和主机向网络发送 的实际速度是不一致的，因为有流量控制和拥塞控制</li></ul></li></ul></li><li>安全TCP<ul><li>TCP &amp; UDP<ul><li>都没有加密</li><li>明文通过互联网传输，甚至密码</li></ul></li><li>SSL<ul><li>在TCP上面实现，提供加密的TCP连接</li><li>私密性</li><li>数据完整性</li><li>端到端的鉴别</li></ul></li><li>SSL在应用层<ul><li>应用采用SSL库，SSL库使用TCP通信</li></ul></li><li>SSL socket API<ul><li>应用通过API将明文交给socket,SSL将其加密在互联网上传输</li></ul></li></ul></li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/21/hello-world/"/>
      <url>/2022/01/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
